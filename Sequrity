Система аутентификации и авторизации с разграничением прав доступа

1. Основные задачи и архитектура
Целью реализации является создание системы аутентификации и авторизации для управления доступом к ресурсам, а также обеспечение безопасности данных. В основе решения используется Spring Security с JWT (JSON Web Token) для безсессионной авторизации и гибкого управления правами доступа.
Архитектура дополнена следующими компонентами:
-  JwtProvider для генерации и валидации токенов (JwtProvider).
- AuthService для формирования данных о пользователе и токене(AuthService).
- MyUserPrincipal — реализация интерфейса UserDetails для инкапсуляции информации о пользователе и его ролях (JwtProvider).
- UserController — управление пользователями и их ролями, использование аннотаций для контроля доступа (AuthService).
В данном проекте реализована система безопасности, включающая:
•	Аутентификацию пользователей с использованием JWT (JSON Web Token).
•	Авторизацию на основе ролей.
•	Механизмы защиты данных, такие как шифрование паролей и контроль доступа.
•	Обеспечение гибкости и масштабируемости системы благодаря разграничению ролей и полномочий.

2. Аутентификация
Аутентификация реализована с использованием JWT. После входа пользователь получает токен, который содержит:
- Имя пользователя (subject).
- Список ролей (authorities).
- Дата и время истечения.

Применение JWT:
•	JWT — это компактный, URL-безопасный формат токенов, который содержит зашифрованную информацию о пользователе.
•	В токене хранятся имя пользователя, список ролей и срок действия.

Пример генерации JWT представлен ниже на рисунке 1.



Рисунок 1 – пример генерации JWT-токена

3. Авторизация
Авторизация основана на проверке токена и ролей пользователя. В проекте реализована система разграничения прав доступа на основе ролей: ADMIN, MANAGER, HR, USER.
Пример конфигурации безопасности представлен ниже:

@EnableMethodSecurity
public class SecurityConfiguration {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
            .authorizeRequests(auth -> auth
                .antMatchers("/users/profile").hasAnyRole("ADMIN", "MANAGER", "HR", "USER")
                .antMatchers("/users/{userId}").hasRole("ADMIN")
                .antMatchers("/users").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .build();
    }
}

Пример использования аннотаций в контроллере:

@Secured({ADMIN}) 
@DeleteMapping("/{userId}") 
public Result delete(@PathVariable String userId) { 
service.deleteById(userId); 
return new Result(true, StatusCode.SUCCESS, "Delete Success");}

Эта структура позволяет гибко управлять доступом к методам на основе ролей.
4. Система разграничения прав доступа
Система разграничения основана на механизме Spring Security с использованием интерфейса UserDetails и класса MyUserPrincipal для хранения и обработки пользовательских данных.
Реализация класса MyUserPrincipal представлена на рисунке 2.

 

Рисунок 2 – реализация класса MyUserPrincipal

5. Обеспечение безопасности данных
Для обеспечения безопасности данных в системе внедрены следующие механизмы:
Шифрование паролей: Пароли пользователей хранятся в зашифрованном виде, используя алгоритм BCrypt. Это повышает защиту в случае утечки данных:

 

Контроль доступа: Используются роли для ограничения доступа к ресурсам. Это позволяет гибко управлять безопасностью, предоставляя минимально необходимые привилегии.
CORS и CSRF: Для защиты от межсайтовых атак:
- CSRF отключён для REST API.
- CORS настроен для работы только с доверенными доменами:

  

Безсессионная авторизация: Сессии на сервере не создаются. Вся информация о пользователе содержится в токене, что делает систему более масштабируемой и безопасной.

6. Изменения архитектуры
Архитектура была расширена следующими компонентами:
- JwtProvider — для работы с JWT.
- AuthService — для управления аутентификацией и генерацией данных о пользователе.
- MyUserPrincipal — для инкапсуляции данных пользователя.
- UserController — контроллер для управления пользователями, с разграничением прав доступа.

Вывод:
Разработанная система аутентификации и авторизации обеспечивает надежную защиту данных и гибкое управление доступом на основе ролей. Внедрение JWT-токенов позволяет поддерживать безсессионную авторизацию, что значительно повышает производительность и масштабируемость. Все изменения добавлены в GitHub, раздел Security, для дальнейшего улучшения и интеграции.
