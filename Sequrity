Система аутентификации и авторизации с разграничением прав доступа
1. Введение и цель разработки
Современные информационные системы, особенно те, которые работают в режиме многопользовательской среды, требуют надежных механизмов аутентификации и авторизации. Аутентификация позволяет удостовериться в личности пользователя, а авторизация — определить его права на выполнение определенных действий. Эти механизмы являются неотъемлемой частью обеспечения безопасности данных и предотвращения несанкционированного доступа.

Цель разработки:

Обеспечить защиту пользовательских данных.
Ограничить доступ к функциональности приложения на основе ролей.
Обеспечить удобство использования, сохранив высокий уровень безопасности.
Для достижения этих целей была реализована система аутентификации на основе JWT (JSON Web Token), а также авторизация с использованием Spring Security. Реализация предусматривает шифрование паролей, разграничение прав доступа и защиту от межсайтовых атак.

2. Аутентификация
Аутентификация является первым этапом взаимодействия пользователя с системой. Её цель — подтвердить, что пользователь действительно является тем, за кого себя выдает.

В данной системе аутентификация реализована через передачу JWT-токена. После успешного ввода учётных данных (имя пользователя и пароль) пользователь получает токен, содержащий следующие данные:

Идентификатор пользователя (subject).
Список ролей (authorities).
Время действия токена.
Этот токен передается в каждом запросе для идентификации пользователя.

Процесс генерации JWT (JwtProvider):
public String createToken(Authentication authentication) {
    Instant now = Instant.now();
    long expiresIn = 2; // Токен действует 2 часа

    String authorities = authentication.getAuthorities().stream()
            .map(GrantedAuthority::getAuthority)
            .collect(Collectors.joining(" "));

    JwtClaimsSet claims = JwtClaimsSet.builder()
            .issuer("self") // Идентификатор системы
            .issuedAt(now) // Время создания токена
            .expiresAt(now.plus(expiresIn, ChronoUnit.HOURS)) // Время истечения
            .subject(authentication.getName()) // Имя пользователя
            .claim("authorities", authorities) // Роли пользователя
            .build();

    return jwtEncoder.encode(JwtEncoderParameters.from(claims)).getTokenValue();
}
Каждый токен подписывается с использованием RSA-ключей, что предотвращает его подделку.

3. Авторизация
Авторизация отвечает за предоставление или ограничение доступа к различным ресурсам приложения. В данной системе реализована ролевая модель. Роли пользователя определяют, какие действия он может выполнять и к каким данным имеет доступ.

Основные роли:

ADMIN — полные права на управление пользователями и другими ресурсами системы.
MANAGER и HR — доступ к управлению ограниченным набором бизнес-данных.
USER — базовый доступ, ограниченный просмотром и изменением личной информации.
Пример контроля доступа: В системе авторизация настроена с использованием аннотаций @Secured:

@Secured({ADMIN})
@DeleteMapping("/{userId}")
public Result delete(@PathVariable String userId) {
    service.deleteById(userId);
    return new Result(true, StatusCode.SUCCESS, "Delete Success");
}
Кроме того, доступ контролируется на уровне конфигурации Spring Security:

http.authorizeRequests(auth -> auth
        .antMatchers("/users/profile").hasAnyRole("ADMIN", "MANAGER", "HR", "USER")
        .antMatchers("/users/{userId}").hasRole("ADMIN")
        .anyRequest().authenticated()
);
Таким образом, только пользователи с конкретными ролями могут вызывать определенные методы API.

4. Система разграничения прав доступа
Для разграничения прав доступа используется механизм Spring Security с интерфейсом UserDetails. Все данные о пользователе и его ролях инкапсулируются в объекте MyUserPrincipal.

Реализация MyUserPrincipal:

public record MyUserPrincipal(AppUser user) implements UserDetails {

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Arrays.stream(StringUtils.tokenizeToStringArray(user.getRole().name(), " "))
                .map(SimpleGrantedAuthority::new)
                .toList();
    }

    @Override
    public String getUsername() {
        return user.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
Этот класс позволяет системе Spring Security автоматически обрабатывать авторизацию на основе ролей, обеспечивая гибкость и надежность.

5. Обеспечение безопасности данных
В дополнение к аутентификации и авторизации были внедрены дополнительные механизмы обеспечения безопасности:

Шифрование паролей: Все пароли хранятся в зашифрованном виде с использованием алгоритма BCrypt. Это минимизирует риск компрометации данных в случае утечки базы данных.

@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder(12);
}
Безсессионная авторизация: Система не использует серверные сессии. Все запросы аутентификации и авторизации проверяются на основе переданного JWT-токена. Это повышает масштабируемость приложения.

Защита от межсайтовых атак:

CSRF отключён для REST API.
CORS настроен для ограниченного доступа только с доверенных доменов:
config.setAllowedOrigins(Collections.singletonList("http://localhost:4200"));
config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "PATCH"));
Разграничение доступа к данным: Доступ к данным определяется на основе ролей. Например, только администратор может изменять данные других пользователей, тогда как обычный пользователь может работать только со своими данными.

6. Изменения архитектуры
В ходе реализации системы аутентификации и авторизации архитектура приложения была изменена следующим образом:

Добавлен модуль JwtProvider, который отвечает за генерацию и проверку токенов.
Реализован AuthService для обработки бизнес-логики аутентификации.
UserController был дополнен методами для управления пользователями, их ролями и доступом.
SecurityConfiguration обеспечила централизованную настройку безопасности приложения.
